(PART I)

1. 
    a.      Occupation(Emily, Doctor) ∨ Occupation(Emily, Lawyer)
    b.      Occupation(Joe, Actor) ∧ (∃(x) (x ≠ Actor) ∧ Occupation(Joe, x))
    c.      ∀x Occupation(x, Surgeon) ⇒ Occupation(x, Doctor)
    d.      ¬(∃x Occupation(x, lawyer) ∧ Customer(Joe, x)) // note: use AND for some
    e.      ∃x Boss(Emily, x) ∧ Occupation(x, lawyer)
    f.      ∃x Occupation(x, lawyer) ∧ ∀y Customer(y, x) ⇒ Occupation(y, Doctor)
    g.      ∀x Occupation(x, surgeon) ⇒ (∃y Occupation(y, lawyer) ∧ Customer(x, y))

2.
    a)
        i.      Everyone needs someone.
        ii.     John loves everything that Mary loves.
        iii.    Everybody has a heart.
        iv.     Everyone has two different parents.
        v.      Everyone can only have two parents.
        vi.     Students who love AI like CS4420
        vii.    Not everybody likes something.
        viii.   Some programs John wrote has bugs in them.
        ix.     Programs that John wrote has some bugs in them.
        x.      Mary doesn't need anything.
        xi.     Students are either awake or not awake.
        xii.    American students don't drink wine.
        xiii.   Everybody's mother is their parent.
        xiv.    Not everybody knows who his/her mother is.
    b)
        i.      ∀x∀y (Student(x) ∧ Museum(y) ⇒ Love(x, y))
        
        ii.     ∃x(Student(x) ∧ 
                    ∀y(Museum(y) ∧ Good(y) ⇒ Likes(x, y))
                )
                
        iii.    ∃x(American(x) ∧ Student(x) ∧ 
                    ∀y(Wine(y) ∧ From(y, France) ⇒ Likes(x, y))
                )
                
        iv.     ∃x(American(x) ∧ 
                    ∀y(Loves(x, y) ∧ Wine(y) ∧ From(y, France) ⇒ 
                        ∀z(Wine(z) ∧ American(z) ⇒ ¬Likes(x, z)
                    )
                )
                
        v.      ∀x∀y(Student(x) ∧ Class(x) ∧ Teaches(Fred, y) ⇒ ¬Likes(x, y))
        
        vi.     ∀x(Museum(x) ∧ x ≠ Louvre ⇒ Visited(Jane, x))
        
        vii.    ∀x(Visited(Jane, x) ∧ Museum(x) ⇒ Knows(Fred, x))
        
        viii.   ∀x(Person(x) ⇒ 
                    ∃y(From(y, France))
                )
                
        ix.     ∀x(Wine(x) ⇒ Drinks(Fred, x))
        
        x.      ∀x∀y(Wine(x) ∧ ¬Wine(y) ⇒ Drinks(Fred, x) ∧ ¬Drinks(Fred, y))
        
        xi.     ∃x(Person(x) ∧ 
                    ∃y(Bug(y) ∧ 
                        ∀z(Program(z) ∧ Wrote(x, z)) ∧ In(y, z) ⇒ Knows(Fred, x))
                     )
                )
                
        xii.    ∀x∀y(Person(x) ∧ Time(y) ⇒ Teases(Fred, x, y))
        
        xiii.   ∀x(Person(x) ∧ ¬Parent(x, x) ⇒ 
                    ∃y∃z(Person(y) ∧ Person(z) ∧ Parent(y, x) ∧ Parent(z, x) ∧ y ≠ z ∧ 
                        ∀w(w ≠ x ∧ w ≠ y ∧ w ≠ z ⇒ ¬Parent(w, x))
                    )
                )
                
        xiv.    ∃x∃y(Person(x) ∧ Person(y) ∧ From(mother(y), France) ∧ Knows(x, y))
        
        xv.     ∀x(Person(x) ∧ Knows(x, mother(Jane)) ⇒ Loves(x, mother(Jane)))
        
        xvi.    ∀x(Class(x) ∧ Teaches(mother(mother(Fred)), x) ⇒ Loves(Jane, x))
        
        xvii.   ∀x∀y∀z(Person(x) ∧ ¬Likes(x, z) ∧ Person(z) ∧ Loves (x, y) ∧ Person(y) ⇒ y ≠ z)
        
        xviii.  ∀x(Person(x) ⇒ 
                    ∃y(Has(x, y) ∧ Heart(y) ∧ Good(y) ∧ Loves(Jane, x))
                )
                
        xiv.    ∀x(Person(x) ⇒ 
                    ∃y(¬Has(x, y) ∧ Wants(x, y))
                )

(PART II)
1.
    a)      {∀x P(x) ⇒ Q(x), P(A10)} |= Q(A10) (definition of entailment)
            {Spouse(Jim, Laura), ¬(Jim = George)} |= ¬Spouse(George, Laura) ?
            The knowledge base doesn't explicitly mention George can't be Laura's
            spouse (because Jim is the spouse of Laura). Therefore, it is possible
            for someone to have multiple spouse relation.
    b)      ∀x(¬(Jim = x) ⇒ ¬Spouse(x, Laura))
2.
    a)      Valid; because equality symbol by definition has a symmetric relation.
    b)      Invalid; because "<" is not defined in FOL so one can't conclude a < b ⇒ a ≠ b
    c)      Valid; because it is merely checking if there's some two elements equal
            to each other for some x and some y.
    d)      Valid; because it <!>
    e)      Valid; because ∀x is everything and ∃y is something. ∃y should be a subset of ∀x.
    f)      Invalid; ∃x should be a subset of ∀y. Therefore, lhs doesn't cover all of the domain of rhs.
    g)      Valid; because ∀x means everything... including f(g(a, b)) whatever it might be.
    h)      Invalid because ∀x

(Extra credit)
Answer:     If we have WA = red and have another state, say New South Wales = red,
            or simply NSW = red, then we could do deduction on WA = red and NSW = red,
            and get WA = NSW, which is not the case for Western Australia and New South Wales.
